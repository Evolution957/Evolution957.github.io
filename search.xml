<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python爬虫</title>
      <link href="/2022/04/06/python-crawler/"/>
      <url>/2022/04/06/python-crawler/</url>
      
        <content type="html"><![CDATA[<h3 id="Python爬虫学习"><a href="#Python爬虫学习" class="headerlink" title="Python爬虫学习"></a>Python爬虫学习</h3><p>整理了一下以前写过的一些小爬虫。</p><h4 id="12306查票"><a href="#12306查票" class="headerlink" title="12306查票"></a>12306查票</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 12306Check.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反复查询加循环即可</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;stations.json&#x27;</span>,mode=<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">text = f.read()</span><br><span class="line">city_json = json.loads(text)</span><br><span class="line">f.close()</span><br><span class="line">from_station = <span class="built_in">input</span>(<span class="string">&#x27;始发站：&#x27;</span>)</span><br><span class="line">to_station = <span class="built_in">input</span>(<span class="string">&#x27;终点站：&#x27;</span>)</span><br><span class="line">train_date = <span class="built_in">input</span>(<span class="string">&#x27;发车日期（格式：2022-04-03）：&#x27;</span>)</span><br><span class="line"><span class="comment"># from_station = &#x27;武汉&#x27;</span></span><br><span class="line"><span class="comment"># to_station = &#x27;长沙&#x27;</span></span><br><span class="line"><span class="comment"># train_date = &#x27;2022-04-06&#x27;</span></span><br><span class="line"><span class="comment"># print(city_json[from_station])</span></span><br><span class="line"><span class="comment"># print(city_json[to_station])</span></span><br><span class="line"><span class="comment"># print(train_date)</span></span><br><span class="line">url = <span class="string">&quot;https://kyfw.12306.cn/otn/leftTicket/query&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&#x27;leftTicketDTO.train_date&#x27;</span>: train_date,</span><br><span class="line"><span class="string">&#x27;leftTicketDTO.from_station&#x27;</span>: city_json[from_station],</span><br><span class="line"><span class="string">&#x27;leftTicketDTO.to_station&#x27;</span>: city_json[to_station],</span><br><span class="line"><span class="string">&#x27;purpose_codes&#x27;</span>: <span class="string">&#x27;ADULT&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">headers =&#123;</span><br><span class="line"><span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;_uab_collina=164896135403377792450208; JSESSIONID=843F9AA2FC700ED2B8E8655CBA8E4AFD; BIGipServerotn=468713994.50210.0000; BIGipServerpool_passport=182714890.50215.0000; highContrastMode=defaltMode; guidesStatus=off; cursorStatus=off; RAIL_EXPIRATION=1649305414970; RAIL_DEVICEID=i7hoNlwMechBKbH0Ghsk6cswUh1nhyGKgfThBDYYiAGy_zBKBevr3wq6zqlS1GV-JvK0B-qVEYwihXSg-WVTUlOcG7NgUJc2INRx-UN6MMxdgg6sumeKjo2NXUwAOlNL7uSajwkmH4Aleee-puGjfAVFL2aVyYMY; route=9036359bb8a8a461c164a04f8f50b252; _jc_save_toStation=%u957F%u6C99%2CCSQ; _jc_save_fromDate=2022-04-03; _jc_save_toDate=2022-04-03; _jc_save_wfdc_flag=dc; _jc_save_fromStation=%u6B66%u6C49%2CWHN&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,params=data,headers=headers)</span><br><span class="line"><span class="comment"># &lt;Response [200]&gt; 获取响应体对象</span></span><br><span class="line"><span class="comment"># response.text 获取响应体的文本数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乱码时可以使用以下方法</span></span><br><span class="line"><span class="comment"># response.encoding = &#x27;utf-8&#x27; #指定utf-8</span></span><br><span class="line">response.encoding = response.apparent_encoding <span class="comment">#自动转码</span></span><br><span class="line">result = response.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;result&#x27;</span>]</span><br><span class="line">lis = []</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> result:</span><br><span class="line">index_list = index.replace(<span class="string">&#x27;有&#x27;</span>,<span class="string">&#x27;Yes&#x27;</span>).replace(<span class="string">&#x27;无&#x27;</span>,<span class="string">&#x27;No&#x27;</span>).split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"><span class="comment"># index_list = index.split(&#x27;|&#x27;)</span></span><br><span class="line">TrainNum = index_list[<span class="number">3</span>]</span><br><span class="line">StartTime = index_list[<span class="number">8</span>]</span><br><span class="line">EndTime = index_list[<span class="number">9</span>]</span><br><span class="line">UseTime = index_list[<span class="number">10</span>]</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;G&#x27;</span> <span class="keyword">in</span> TrainNum):</span><br><span class="line">BussinessSeats = index_list[<span class="number">32</span>] <span class="comment">#商务座</span></span><br><span class="line">FirstSeats = index_list[<span class="number">31</span>] <span class="comment">#一等座</span></span><br><span class="line">SecondSeats = index_list[<span class="number">30</span>] <span class="comment">#二等座</span></span><br><span class="line">di = &#123;</span><br><span class="line"><span class="string">&#x27;Num&#x27;</span>: TrainNum,</span><br><span class="line"><span class="string">&#x27;Start&#x27;</span>: StartTime,</span><br><span class="line"><span class="string">&#x27;End&#x27;</span>: EndTime,</span><br><span class="line"><span class="string">&quot;Use&quot;</span>: UseTime,</span><br><span class="line"><span class="string">&quot;Top&quot;</span>: BussinessSeats,</span><br><span class="line"><span class="string">&quot;First&quot;</span>: FirstSeats,</span><br><span class="line"><span class="string">&quot;Second&quot;</span>: SecondSeats,</span><br><span class="line"><span class="string">&quot;Soft&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&quot;HBed&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&quot;HSeats&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&quot;NSeats&quot;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">SoftBeds = index_list[<span class="number">23</span>] <span class="comment">#软卧</span></span><br><span class="line">HardBeds = index_list[<span class="number">28</span>] <span class="comment">#硬卧</span></span><br><span class="line">HardSeats = index_list[<span class="number">29</span>] <span class="comment">#硬座</span></span><br><span class="line">NoSeats = index_list[<span class="number">26</span>] <span class="comment">#无座</span></span><br><span class="line">di = &#123;</span><br><span class="line"><span class="string">&#x27;Num&#x27;</span>: TrainNum,</span><br><span class="line"><span class="string">&#x27;Start&#x27;</span>: StartTime,</span><br><span class="line"><span class="string">&#x27;End&#x27;</span>: EndTime,</span><br><span class="line"><span class="string">&quot;Use&quot;</span>: UseTime,</span><br><span class="line"><span class="string">&quot;Top&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&quot;First&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&quot;Second&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&quot;Soft&quot;</span>: SoftBeds,</span><br><span class="line"><span class="string">&quot;HBed&quot;</span>: HardBeds,</span><br><span class="line"><span class="string">&quot;HSeats&quot;</span>: HardSeats,</span><br><span class="line"><span class="string">&quot;NSeats&quot;</span>: NoSeats</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># print(di)</span></span><br><span class="line">lis.append(di)</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>,<span class="literal">None</span>) <span class="comment">#展示最大化，把所有行展示出来</span></span><br><span class="line">content = pd.DataFrame(lis)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/06/fDMaIr74u2E1OZn.png" alt="image-20220406083305519.png"></p><p>生成stations.json文件：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#get_station_code.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getResponse</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">        response = requests.get(url,headers = headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&quot;https://kyfw.12306.cn/otn/resources/js/framework/station_name.js&quot;</span></span><br><span class="line">    data = getResponse(url)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        dict_data = &#123;&#125;</span><br><span class="line">        text = data.text</span><br><span class="line">        str_split = text.split(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> chars <span class="keyword">in</span> str_split[<span class="number">1</span>:]:</span><br><span class="line">            station = chars.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">            dict_data[station[<span class="number">1</span>]] = station[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;stations.json&quot;</span>,<span class="string">&#x27;w&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            json.dump(dict_data,fp,ensure_ascii = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="网易云热歌爬取"><a href="#网易云热歌爬取" class="headerlink" title="网易云热歌爬取"></a>网易云热歌爬取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 163MusicGet.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_name</span>(<span class="params">name</span>):</span><br><span class="line">new_name = re.sub(<span class="string">r&#x27;[\/\\\:\*\?\&quot;\&lt;\&gt;\|\✩\˚\*\•̩̩͙ʚ]&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,name) <span class="comment">#各个符号间用转义字符隔开</span></span><br><span class="line"><span class="keyword">return</span> new_name</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;music\\&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">os.mkdir(filename)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://music.163.com/discover/toplist?id=19723756&quot;</span> <span class="comment">#不同榜单切换该id即可</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,headers=headers)</span><br><span class="line">html_data = re.findall(<span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;/song\?id=(\d+)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>,response.text) <span class="comment"># ？前面记得加个转义字符</span></span><br><span class="line"><span class="keyword">for</span> music_id,music_name <span class="keyword">in</span> html_data:</span><br><span class="line"><span class="comment"># 下载地址：https://music.163.com/song/media/outer/url?id=1933915376.mp3</span></span><br><span class="line">music_url = <span class="string">f&quot;https://music.163.com/song/media/outer/url?id=<span class="subst">&#123;music_id&#125;</span>.mp3&quot;</span></span><br><span class="line">music_content = requests.get(url=music_url,headers=headers).content</span><br><span class="line">music_name = change_name(music_name)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename + music_name +<span class="string">&#x27;.mp3&#x27;</span>,mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(music_content)</span><br><span class="line"><span class="built_in">print</span>(music_id,music_name)</span><br></pre></td></tr></table></figure><p>MP3文件保存在music文件夹下：</p><p><img src="https://s2.loli.net/2022/04/06/u73hIWizV69jsMb.png" alt="image-20220406084013424.png"></p><h4 id="古诗词爬取"><a href="#古诗词爬取" class="headerlink" title="古诗词爬取"></a>古诗词爬取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PoetryGet.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.oh100.com/shici/1127009.html&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,headers=headers)</span><br><span class="line">response.encoding = response.apparent_encoding</span><br><span class="line">li = re.findall(<span class="string">&quot;\d+?、(.*?)&lt;/p&gt;&lt;p&gt;&quot;</span>,response.text)</span><br><span class="line">li[-<span class="number">1</span>] = re.sub(<span class="string">r&quot;&lt;/p&gt;&lt;script&gt;s\(\&quot;content_relate\&quot;\)\;\&lt;\/script\&gt;\&lt;p\&gt;\【形容洒脱的诗词\】相关文章\：&quot;</span>,<span class="string">&quot;&quot;</span>,li[-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> se <span class="keyword">in</span> li:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;- &quot;</span>+se)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/06/JXvfrT9FMqRDAPa.png" alt="image-20220406084235256.png"></p><h4 id="壁纸爬取"><a href="#壁纸爬取" class="headerlink" title="壁纸爬取"></a>壁纸爬取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># WallPaperGet.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">整体思路：</span></span><br><span class="line"><span class="string">1、访问网站查看信息（F12不可用可以先在别的网页打开再访问该网址）</span></span><br><span class="line"><span class="string">2、进入对应tag观察request的headers等信息（注意要点击加载更多后再看XHR下的文件）</span></span><br><span class="line"><span class="string">3、进入特定照片观察信息</span></span><br><span class="line"><span class="string">4、在text属性中获取title、img_url等信息</span></span><br><span class="line"><span class="string">5、在本地保存下来</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;img\\&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">os.mkdir(filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_title</span>(<span class="params">name</span>): <span class="comment">#重命名文件，防止原有保存文件名不合法</span></span><br><span class="line">new_name = re.sub(<span class="string">r&#x27;[\/\\\:\*\?\&quot;\&lt;\&gt;\|]&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,name) <span class="comment">#各个符号间用转义字符隔开</span></span><br><span class="line"><span class="keyword">return</span> new_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>): <span class="comment">#指定页数</span></span><br><span class="line">url = <span class="string">f&quot;https://m.bcoderss.com/tag/%e7%be%8e%e5%a5%b3/page/<span class="subst">&#123;page&#125;</span>/&quot;</span> <span class="comment"># %e7%be%8e%e5%a5%b3代表了美女这个标签，可以自行选择</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url=url,headers=headers) <span class="comment">#该网站是个post请求但是不需要传params</span></span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line">href = re.findall(<span class="string">&#x27;&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;(.*?)&quot;&#x27;</span>,response.text)[<span class="number">2</span>:] <span class="comment">#找到所有的照片初始地址，前两个是无用地址</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> href:</span><br><span class="line">response_1 = requests.get(url=index,headers=headers) <span class="comment">#访问照片初始地址</span></span><br><span class="line">title = re.findall(<span class="string">&quot;&lt;title&gt;(.*?)&lt;/title&gt;&quot;</span>,response_1.text)[<span class="number">0</span>] <span class="comment">#获取照片标题</span></span><br><span class="line">title = change_title(title)</span><br><span class="line">img_url = re.findall(<span class="string">&#x27;&lt;img alt=&quot;.*?&quot; title=&quot;.*?&quot; src=&quot;(.*?)&quot;&gt;&#x27;</span>,response_1.text)[<span class="number">0</span>] <span class="comment">#获取照片下载地址</span></span><br><span class="line">img_content = requests.get(url=img_url,headers=headers).content <span class="comment">#获取照片内容</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename + title + <span class="string">&#x27;.jpg&#x27;</span>,mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f: <span class="comment">#保存照片</span></span><br><span class="line">f.write(img_content)</span><br><span class="line"><span class="built_in">print</span>(title,img_url)</span><br></pre></td></tr></table></figure><p>壁纸会保存在img文件夹下（图片不是很适合放出来，就放下文字吧…）</p><p><img src="https://s2.loli.net/2022/04/06/hgFZor87UKQkRjd.png" alt="image-20220406084429168.png"></p><h4 id="LOL英雄皮肤图片爬取"><a href="#LOL英雄皮肤图片爬取" class="headerlink" title="LOL英雄皮肤图片爬取"></a>LOL英雄皮肤图片爬取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># LOL.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_name</span>(<span class="params">name</span>):</span><br><span class="line">new_name = re.sub(<span class="string">r&#x27;[\/\\\:\*\?\&quot;\&lt;\&gt;\|\✩\˚\*\•̩̩͙ʚ]&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,name) <span class="comment">#各个符号间用转义字符隔开</span></span><br><span class="line"><span class="keyword">return</span> new_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_img</span>(<span class="params">name,title,skin_name,skin_url</span>):</span><br><span class="line">filename = <span class="string">f&#x27;<span class="subst">&#123;name+title&#125;</span>\\&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">os.mkdir(filename)</span><br><span class="line">content = requests.get(url=skin_url,headers=headers).content</span><br><span class="line">newname = change_name(skin_name)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename+newname+<span class="string">&#x27;.jpg&#x27;</span>,mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(content)</span><br><span class="line"><span class="built_in">print</span>(skin_name)</span><br><span class="line"></span><br><span class="line">hero_list_url = <span class="string">&quot;https://game.gtimg.cn/images/lol/act/img/js/heroList/hero_list.js?ts=2748291&quot;</span></span><br><span class="line">response = requests.get(url=hero_list_url,headers=headers)</span><br><span class="line">hero_list = response.json()[<span class="string">&#x27;hero&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> hero <span class="keyword">in</span> hero_list:</span><br><span class="line">hero_id = hero[<span class="string">&#x27;heroId&#x27;</span>]</span><br><span class="line">hero_name = hero[<span class="string">&#x27;name&#x27;</span>] </span><br><span class="line">hero_title = hero[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">hero_url = <span class="string">f&quot;https://game.gtimg.cn/images/lol/act/img/js/hero/<span class="subst">&#123;hero_id&#125;</span>.js&quot;</span></span><br><span class="line">response_1 = requests.get(url=hero_url,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(hero_id,hero_name,hero_title)</span><br><span class="line">skin_list = response_1.json()[<span class="string">&#x27;skins&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> skin <span class="keyword">in</span> skin_list:</span><br><span class="line"><span class="keyword">if</span>(skin[<span class="string">&#x27;mainImg&#x27;</span>]):</span><br><span class="line">skin_url = skin[<span class="string">&#x27;mainImg&#x27;</span>]</span><br><span class="line">skin_name = skin[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">save_img(hero_name,hero_title,skin_name,skin_url)</span><br><span class="line"><span class="comment"># print(skin_url)</span></span><br></pre></td></tr></table></figure><p>各个英雄的皮肤会保存在自己的文件下：</p><p><img src="https://s2.loli.net/2022/04/06/LEcIVRNbux1rnDA.png" alt="image-20220406084813906.png"></p><p><img src="https://s2.loli.net/2022/04/06/R4XxZkbLVtwQcHe.png" alt="image-20220406084841993.png"></p><h4 id="王者荣耀英雄皮肤爬取"><a href="#王者荣耀英雄皮肤爬取" class="headerlink" title="王者荣耀英雄皮肤爬取"></a>王者荣耀英雄皮肤爬取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wzry.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_name</span>(<span class="params">name</span>):</span><br><span class="line">new_name = re.sub(<span class="string">r&#x27;[\/\\\:\*\?\&quot;\&lt;\&gt;\|\✩\˚\*\•̩̩͙ʚ]&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,name) <span class="comment">#各个符号间用转义字符隔开</span></span><br><span class="line"><span class="keyword">return</span> new_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_img</span>(<span class="params">name,title,skin_name,skin_url</span>):</span><br><span class="line">filename = <span class="string">f&quot;<span class="subst">&#123;title+name&#125;</span>\\&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">os.mkdir(filename)</span><br><span class="line">content = requests.get(url=skin_url,headers=headers).content</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename+skin_name+<span class="string">&#x27;_&#x27;</span>+name+<span class="string">&#x27;.jpg&#x27;</span>,mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(content)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">herolist_url = <span class="string">&quot;https://pvp.qq.com/web201605/js/herolist.json&quot;</span></span><br><span class="line">herolist = requests.get(url=herolist_url,headers=headers).json()</span><br><span class="line"><span class="keyword">for</span> hero <span class="keyword">in</span> herolist:</span><br><span class="line">hero_ename = hero[<span class="string">&#x27;ename&#x27;</span>]</span><br><span class="line">hero_name = hero[<span class="string">&#x27;cname&#x27;</span>]</span><br><span class="line">hero_title = hero[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(hero_ename,hero[<span class="string">&#x27;cname&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;skin_name&#x27;</span> <span class="keyword">in</span> hero):</span><br><span class="line">skin_list = hero[<span class="string">&#x27;skin_name&#x27;</span>].split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">hero_url = <span class="string">f&quot;https://pvp.qq.com/web201605/herodetail/<span class="subst">&#123;hero_ename&#125;</span>.shtml&quot;</span></span><br><span class="line">response = requests.get(url=hero_url,headers=headers)</span><br><span class="line">response.encoding = response.apparent_encoding</span><br><span class="line">tu = re.findall(<span class="string">&#x27;&lt;ul class=\&quot;pic-pf-list pic-pf-list3\&quot; data-imgname=\&quot;(.*?)\&amp;0\|(.*?)\&amp;0\|(.*?)\&amp;72\&quot;&gt;&#x27;</span>,response.text)</span><br><span class="line">skin_list = <span class="built_in">list</span>(tu[<span class="number">0</span>])</span><br><span class="line">skin_lens = <span class="built_in">len</span>(skin_list)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(skin_lens):</span><br><span class="line">skin_url = <span class="string">f&quot;https://game.gtimg.cn/images/yxzj/img201606/heroimg/<span class="subst">&#123;hero_ename&#125;</span>/<span class="subst">&#123;hero_ename&#125;</span>-bigskin-<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>.jpg&quot;</span></span><br><span class="line">skin_name = skin_list[i]</span><br><span class="line">save_img(hero_name,hero_title,skin_name,skin_url)</span><br><span class="line"><span class="built_in">print</span>(skin_name,hero_name)</span><br></pre></td></tr></table></figure><p>文件保存思路与LOL一致：</p><p><img src="https://s2.loli.net/2022/04/06/qpJTLrSeatgcbKk.png" alt="image-20220406085029196.png"></p><p><img src="https://s2.loli.net/2022/04/06/6RMvwCJk37HqOfi.png" alt="image-20220406085046682.png"></p><h4 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h4>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/05/hello-world/"/>
      <url>/2022/04/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test1 </tag>
            
            <tag> test2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
